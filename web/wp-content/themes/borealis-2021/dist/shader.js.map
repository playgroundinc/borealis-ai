{"version":3,"file":"shader.js","mappings":";;;;;AAAA,IAAIA,KAAJ;AACA,IAAIC,MAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,QAAQ,GAAG,EAAf;;AAEA,SAASC,WAAT,GAAuB;AACnB,SAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApFI;AAqFH;;AAED,SAASC,cAAT,GAA0B;AACtB,SAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAxBI;AAyBH;;AAED,SAASC,IAAT,GAAgB;AACZ,QAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAlB;AAEAV,EAAAA,KAAK,GAAG,IAAIW,KAAK,CAACC,KAAV,EAAR;AACAX,EAAAA,MAAM,GAAG,IAAIU,KAAK,CAACE,MAAV,EAAT;AACAZ,EAAAA,MAAM,CAACa,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AAEA,QAAMC,QAAQ,GAAG,IAAIL,KAAK,CAACM,mBAAV,CAA8B,CAA9B,EAAiC,CAAjC,CAAjB;AAEA,QAAMb,QAAQ,GAAG;AACbc,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,KAAK,EAAE;AAApB,KADK;AAEbC,IAAAA,YAAY,EAAE;AAAEF,MAAAA,IAAI,EAAE,IAAR;AAAcC,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","sources":["webpack://pg-wp-starter/./src/js/scripts/shader.js"],"sourcesContent":["let scene;\nlet camera;\nlet renderer;\nlet sceneObjects = [];\nlet uniforms = {};\n\nfunction perlinNoise() {\n    return `\n        vec3 mod289(vec3 x) {\n            return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 mod289(vec4 x) {\n            return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 permute(vec4 x) {\n            return mod289(((x*34.0)+1.0)*x);\n        }\n\n        vec4 taylorInvSqrt(vec4 r) {\n            return 1.79284291400159 - 0.85373472095314 * r;\n        }\n\n        float snoise(vec3 v) {\n            const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n            const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n            // First corner\n            vec3 i  = floor(v + dot(v, C.yyy) );\n            vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n            // Other corners\n            vec3 g = step(x0.yzx, x0.xyz);\n            vec3 l = 1.0 - g;\n            vec3 i1 = min( g.xyz, l.zxy );\n            vec3 i2 = max( g.xyz, l.zxy );\n\n            vec3 x1 = x0 - i1 + C.xxx;\n            vec3 x2 = x0 - i2 + C.yyy;\n            vec3 x3 = x0 - D.yyy;     \n\n            // Permutations\n            i = mod289(i);\n            vec4 p = permute( permute( permute(\n                i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                        + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n            // Gradients: 7x7 points over a square, mapped onto an octahedron.\n            // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n            float n_ = 0.142857142857;\n            vec3  ns = n_ * D.wyz - D.xzx;\n\n            vec4 j = p - 49.0 * floor(p * ns.z * ns.z); \n\n            vec4 x_ = floor(j * ns.z);\n            vec4 y_ = floor(j - 7.0 * x_ );  \n\n            vec4 x = x_ *ns.x + ns.yyyy;\n            vec4 y = y_ *ns.x + ns.yyyy;\n            vec4 h = 1.0 - abs(x) - abs(y);\n\n            vec4 b0 = vec4( x.xy, y.xy );\n            vec4 b1 = vec4( x.zw, y.zw );\n\n            vec4 s0 = floor(b0)*2.0 + 1.0;\n            vec4 s1 = floor(b1)*2.0 + 1.0;\n            vec4 sh = -step(h, vec4(0.0));\n\n            vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n            vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n            vec3 p0 = vec3(a0.xy,h.x);\n            vec3 p1 = vec3(a0.zw,h.y);\n            vec3 p2 = vec3(a1.xy,h.z);\n            vec3 p3 = vec3(a1.zw,h.w);\n\n            //Normalise gradients\n            vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n            p0 *= norm.x;\n            p1 *= norm.y;\n            p2 *= norm.z;\n            p3 *= norm.w;\n\n            // Mix final noise value\n            vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n            m = m * m;\n            return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                            dot(p2,x2), dot(p3,x3) ) );\n        }\n    `\n}\n\nfunction fragmentShader() {\n    return `\n        precision mediump float;\n        uniform float u_time;\n        uniform vec2  u_resolution;\n        uniform vec2 u_mouse;\n        uniform vec2 c_mouse;\n\n        void main(){\n            vec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n            vec2 p_mouse = (u_mouse.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n\n            float noise = (snoise(vec3(1.0, 1.0, u_time / 3.0)) + 1.0) / 2.0;\n\n\n            float offset = (1.0 / length(vec2(p.x - p_mouse.x, p.y + p_mouse.y))) * noise / 2.0;\n\n            vec3 rgb_color = vec3(\n                (snoise(vec3(p.x / 3.0, p.y / 3.0, u_time / 1.1)) + 0.1),\n                (snoise(vec3(p.x / 2.0, p.y / 2.0, u_time / 1.2)) + 0.1),\n                (snoise(vec3(p.x / 5.0, p.y / 5.0, u_time / 1.3)) + 1.0) / 2.0 + offset\n            );\n\n            gl_FragColor = vec4(rgb_color, 1.0);\n        }\n    `\n}\n\nfunction init() {\n    const container = document.getElementById('canvas')\n\n    scene = new THREE.Scene()\n    camera = new THREE.Camera()\n    camera.position.z = 1\n\n    const geometry = new THREE.PlaneBufferGeometry(2, 2)\n    \n    const uniforms = {\n        u_time: { type: 'f', value: 100.0 },\n        u_resolution: { type: 'v2', value: new THREE.Vector2() },\n        u_mouse: { type: 'v2', value: new THREE.Vector2() },\n        c_mouse: { type: 'v2', value: new THREE.Vector2() }\n    }\n\n    const material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        fragmentShader: [\n            perlinNoise(),\n            fragmentShader()\n        ].join('\\n'),\n    })\n\n    const mesh = new THREE.Mesh(geometry, material)\n\n    let mouseY = 0\n    let mouseX = 0\n\n    const renderer = new THREE.WebGLRenderer({\n        canvas: container\n    })\n\n    renderer.setSize(renderer.domElement.width, renderer.domElement.height)\n\n    window.addEventListener('resize', setSize, false)\n\n    document.addEventListener('mousemove', (event) => {\n        mouseX = event.pageX\n        mouseY = event.pageY\n    }, false)\n\n    document.body.appendChild(renderer.domElement)\n\n    scene.add(mesh)\n    setSize()\n    animate()\n\n    function setSize () {\n        container.width = window.innerWidth\n        container.height = window.innerHeight\n        renderer.setSize(renderer.domElement.width, renderer.domElement.height)\n        uniforms.u_resolution.value.x = renderer.domElement.width\n        uniforms.u_resolution.value.y = renderer.domElement.height\n    }\n\n    function animate () {\n        requestAnimationFrame(animate)\n        render()\n    }\n\n    function render () {\n        uniforms.u_time.value += 0.005\n        uniforms.u_mouse.value.x += (mouseX - uniforms.u_mouse.value.x) / 30\n        uniforms.u_mouse.value.y += (mouseY - uniforms.u_mouse.value.y) / 30\n        renderer.render(scene, camera)\n    }\n}\n\ninit();"],"names":["scene","camera","renderer","sceneObjects","uniforms","perlinNoise","fragmentShader","init","container","document","getElementById","THREE","Scene","Camera","position","z","geometry","PlaneBufferGeometry","u_time","type","value","u_resolution","Vector2","u_mouse","c_mouse","material","ShaderMaterial","join","mesh","Mesh","mouseY","mouseX","WebGLRenderer","canvas","setSize","domElement","width","height","window","addEventListener","event","pageX","pageY","body","appendChild","add","animate","innerWidth","innerHeight","x","y","requestAnimationFrame","render"],"sourceRoot":""}